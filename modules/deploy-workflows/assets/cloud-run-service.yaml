# data structure scheme:
# {
#   "image": string,
#   "tag": string,
#   "service": string
# }

main:
  params: [data]
  steps:
    - fetchServiceManifest:
        call: http.get
        args:
          url: ${"https://europe-west1-run.googleapis.com/apis/serving.knative.dev/v1/namespaces/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/services/" + data.service}
          auth:
            type: OAuth2
        result: cloudRunService
    - getServiceAccount:
        assign:
          - serviceAccount: ${cloudRunService.body.spec.template.spec.serviceAccountName}
    - buildServiceManifest:
        assign:
          - serviceManifest:
              kind: "Service"
              apiVersion: "serving.knative.dev/v1"
              metadata:
                name: ${data.service}
              spec:
                template:
                  spec:
                    serviceAccountName: ${serviceAccount}
                    containers:
                      - image: ${"eu.gcr.io/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/" + data.image + ":" + data.tag}
    - updateCloudRunService:
        call: http.request
        args:
          url: ${"https://europe-west1-run.googleapis.com/apis/serving.knative.dev/v1/namespaces/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/services/" + data.service}
          method: PUT
          body: ${serviceManifest}
          auth:
            type: OAuth2
        result: cloudRunResponse
    - returnOutput:
        return: ${cloudRunResponse}
